---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Cart">
  <main class="min-h-screen bg-gray-100 p-6">
    <h1 class="text-2xl font-bold mb-4">Shopping Cart</h1>
    <ul id="cart-list" class="space-y-4"></ul>
    <div class="mt-6 flex justify-between items-center">
      <p id="total-amount" class="text-xl font-bold text-gray-800"></p>
      <button
        id="checkout-btn"
        class="bg-gray-800 text-white py-2 px-4 rounded-md hover:bg-gray-900"
      >
        Proceed to Checkout
      </button>
    </div>
  </main>

  <script>
    document.addEventListener("DOMContentLoaded", async () => {
      const cartList = document.getElementById("cart-list");
      const totalAmountElement = document.getElementById("total-amount");
      const checkoutBtn = document.getElementById("checkout-btn");
      const cart = JSON.parse(localStorage.getItem("cart") || "[]");

      if (cart.length === 0) {
        if (cartList) {
          cartList.innerHTML =
            "<p class='text-gray-600'>Your cart is empty.</p>";
        }
        if (checkoutBtn) {
          checkoutBtn.disabled = true;
        }
        return;
      }

      try {
        // Fetch product details for the cart items
        const response = await fetch("http://localhost:4000/products");
        if (!response.ok) throw new Error("Failed to fetch products");
        const products = await response.json();

        let totalAmount = 0;

        // Map cart IDs to full product details
        const detailedCart = cart
          .map((productId) => {
            const product = products.find((p) => p.id === productId);
            return product ? { ...product, quantity: 1 } : null;
          })
          .filter(Boolean); // Remove nulls for invalid IDs

        // Render the cart items
        detailedCart.forEach((product) => {
          totalAmount += product.price * product.quantity;

          const item = document.createElement("li");
          item.className =
            "flex justify-between items-center bg-white p-4 rounded-lg shadow-md";
          item.innerHTML = `
            <div>
              <h3 class="text-lg font-semibold text-gray-800">${product.name}</h3>
              <p class="text-gray-600 text-sm">Price: $${product.price.toFixed(2)}</p>
              <p class="text-gray-600 text-sm">Quantity: ${product.quantity}</p>
            </div>
            <button
              class="bg-red-500 text-white py-1 px-3 rounded-md hover:bg-red-600"
              onclick="removeFromCart('${product.id}')"
              data-id="${product.id}"
            >
              Remove
            </button>
          `;
          if (cartList) {
            cartList.appendChild(item);
          }
        });

        // Show total amount
        if (totalAmountElement) {
          totalAmountElement.textContent = `Total: $${totalAmount.toFixed(2)}`;
        }

        // Checkout functionality
        if (checkoutBtn) {
          checkoutBtn.addEventListener("click", async () => {
            try {
              const response = await fetch("http://localhost:4000/orders", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  Authorization: `Bearer ${localStorage.getItem("token")}`,
                },
                body: JSON.stringify({
                  userId: JSON.parse(localStorage.getItem("user")).id,
                  items: detailedCart.map((product) => ({
                    productId: product.id,
                    quantity: product.quantity,
                    price: product.price,
                  })),
                  status: "completed",
                }),
              });

              if (!response.ok) throw new Error("Failed to process order");

              localStorage.removeItem("cart");
              alert("Order placed successfully!");
            } catch (error) {
              console.error(error);
              alert("An error occurred while processing your order.");
            }
          });
        }
      } catch (error) {
        console.error("Error loading cart:", error);
        if (cartList) {
          cartList.innerHTML =
            "<p class='text-gray-600'>Failed to load your cart. Please try again later.</p>";
        }
      }
    });

    (window as any).removeFromCart = function (productId) {
      const cart = JSON.parse(localStorage.getItem("cart") || "[]");
      const updatedCart = cart.filter((id) => id !== productId);

      localStorage.setItem("cart", JSON.stringify(updatedCart));

      const item = document.querySelector(
        `#cart-list button[data-id="${productId}"]`,
      ).parentElement;
      if (item) {
        item.remove();
      }

      const remainingItems = document.querySelectorAll("#cart-list li");
      if (remainingItems.length === 0) {
        document.getElementById("total-amount").textContent = "";
        document.getElementById("checkout-btn").disabled = true;
        document.getElementById("cart-list").innerHTML =
          "<p class='text-gray-600'>Your cart is empty.</p>";
      } else {
        updateTotalAmount();
      }
    };

    function updateTotalAmount() {
      const cart = JSON.parse(localStorage.getItem("cart") || "[]");

      fetch("http://localhost:4000/products")
        .then((response) => {
          if (!response.ok) throw new Error("Failed to fetch products");
          return response.json();
        })
        .then((products) => {
          let totalAmount = 0;
          cart.forEach((productId) => {
            const product = products.find((p) => p.id === productId);
            if (product) {
              totalAmount += product.price;
            }
          });
          document.getElementById("total-amount").textContent =
            `Total: $${totalAmount.toFixed(2)}`;
        })
        .catch((error) => {
          console.error("Error updating total amount:", error);
        });
    }
  </script>
</Layout>
