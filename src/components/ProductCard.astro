---
const { product, role } = Astro.props;
---

<li id={`product-${product.id}`} class="bg-white border border-gray-300 rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow">
  <img 
    src={product.img} 
    alt={product.name} 
    class="w-full h-48 object-cover rounded-md mb-4"
  />
  <h3 class="text-lg font-semibold text-gray-800">{product.name}</h3>
  <p class="text-gray-600 text-sm">{product.description}</p>
  <div class="flex justify-between items-center mt-2">
    <p class="text-gray-900 font-bold">${product.price.toFixed(2)}</p>
    <p class="text-gray-600 text-sm">Available: {product.quantity}</p>
  </div>

  {role === "admin" && (
    <div class="mt-4 flex gap-2">
      <button 
        class="bg-gray-800 text-white py-1 px-3 rounded-md hover:bg-gray-900"
        data-action="delete"
        data-id={product.id}
      >
        Delete
      </button>
      <button 
        class="bg-gray-500 text-white py-1 px-3 rounded-md hover:bg-gray-700"
        data-action="edit"
        data-id={product.id}
      >
        Edit
      </button>
    </div>
  )}

  {role === "client" && (
    <button 
      class="bg-gray-500 text-white py-1 px-3 rounded-md hover:bg-gray-600 mt-4"
      data-action="add-to-cart"
      data-id={product.id}
    >
      Add to Cart
    </button>
  )}

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const deleteButtons = document.querySelectorAll('button[data-action="delete"]');
      const editButtons = document.querySelectorAll('button[data-action="edit"]');
      const addToCartButtons = document.querySelectorAll('button[data-action="add-to-cart"]');

      deleteButtons.forEach((button) => {
        button.addEventListener("click", async () => {
          const productId = (button as HTMLElement).dataset.id;

          if (!confirm("Are you sure you want to delete this product?")) return;

          try {
            const response = await fetch(`http://localhost:4000/products/${productId}`, {
              method: "DELETE",
              headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${localStorage.getItem("token")}`,
              },
            });

            if (!response.ok) throw new Error("Failed to delete product");
            
            document.getElementById(`product-${productId}`).remove();
            alert("Product deleted successfully.");
          } catch (error) {
            console.error(error);
            alert("An error occurred while deleting the product.");
          }
        });
      });

      editButtons.forEach((button) => {
        button.addEventListener("click", async () => {
          const productId = (button as HTMLElement).dataset.id;

          const newName = prompt("Enter the new name for the product:");
          const newPrice = prompt("Enter the new price for the product:");
          const newDescription = prompt("Enter the new description for the product:");

          if (!newName || !newPrice || !newDescription) {
            alert("All fields are required for editing.");
            return;
          }

          try {
            const response = await fetch(`http://localhost:4000/products/${productId}`, {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${localStorage.getItem("token")}`,
              },
              body: JSON.stringify({
                name: newName,
                price: parseFloat(newPrice),
                description: newDescription,
              }),
            });

            if (!response.ok) throw new Error("Failed to edit product");

            const productElement = document.getElementById(`product-${productId}`);
            productElement.querySelector("h3").textContent = newName;
            productElement.querySelector(".text-gray-900").textContent = `$${parseFloat(newPrice).toFixed(2)}`;
            productElement.querySelector(".text-gray-600").textContent = newDescription;

            alert("Product updated successfully.");
          } catch (error) {
            console.error(error);
            alert("An error occurred while updating the product.");
          }
        });
      });

      addToCartButtons.forEach((button) => {
        button.addEventListener("click", () => {
          const productId = (button as HTMLElement).dataset.id;
          const cart = JSON.parse(localStorage.getItem("cart") || "[]");

          if (!cart.includes(productId)) {
            cart.push(productId);
          }

          localStorage.setItem("cart", JSON.stringify(cart));
          alert("Product added to cart.");
        });
      });

    });
  </script>
</li>
